!::
! New Game (Shell)
!::
constant GAME_TITLE	"GAME TITLE"

!:: Flags
!#set BETA                ! Compile with the comments-in-transcripts library
#set USE_ROODYLIB                          !   addition (requires "beta.h")
#set OBJECT_SORTING
#set LIST_KNOWN_ROOMS
#set HUGOFIX             ! Compile with HugoFix Debugging Library commands
                          !   available (type $? in game)

#ifset HUGOFIX
#set DEBUG
#endif

!:: Other pre-Hugolib.h Constants
! (some constants must be set before hugolib is included)

!constant AFTER_PERIOD " "     ! include one space after full stops (as opposed
                               !   to two)
!constant INDENT_SIZE 0        ! no indentation in room descriptions and room
                               !   content listings

!:: Grammar Library Inclusions (grammar must come first)
#ifset USE_ROODYLIB
#include "roodylib.g"
#endif
! new grammar needs to be defined before the including verblib
#include "verblib.g"        ! Verb Library

#include "hugolib.h"        ! Standard  Hugo Library

#ifset USE_ROODYLIB
#include "roodylib.h"         ! Hugo  Library Updates
#endif

#include "new_can_go.h"
!::	Other Library Inclusions
#ifset BETA
#include "beta.h"
#endif

#ifset CHEAP
#include "cheaplib.h"
#endif

!:: Other constants and global variables
!constant IFID "put-IFID here"

!::	Game Initialization	routine
routine init
{
!: First Things First
	SetGlobalsAndFillArrays
!: Screen clear section
#ifclear _ROODYLIB_H
	CenterTitle("Hugo Interactive Fiction")
	cls
#else
	SimpleIntro
	InitScreen
!: Set up any special libries
	Init_Calls
#endif
!: Game opening
	IntroText
	MovePlayer(location)
}

routine SetGlobalsAndFillArrays
{
!\ Uncomment and modify this section if your game has scoring and ranking.
	MAX_SCORE = 50
	ranking[0] = "Amateur Adventurer"
	ranking[1] = "Competent Door-Unlocker"
	ranking[2] = "Bomb-Meddling Adventurer"
	ranking[3] = "Master Magic Wand Finder"
	ranking[4] = "The Genuine Article Sample Game Solver"
	MAX_RANK = 4  \!
	verbosity = 2
	counter = -1                    ! 1 turn before turn 0
	!ask_color = 0
	STATUSTYPE = 1   ! 1 = score/turns, 2 = time, 3 = moves: score:
	TEXTCOLOR = DEF_FOREGROUND
	BGCOLOR = DEF_BACKGROUND
	SL_TEXTCOLOR = DEF_SL_FOREGROUND
	SL_BGCOLOR = DEF_SL_BACKGROUND
	prompt = ">"
	DEFAULT_FONT = PROP_ON
	player = you
	location = STARTLOCATION
!	inconsistent_exits = true
}

!::	Main game loop
routine	main
{
	counter	= counter +	1
	run	location.each_turn
	runevents
	RunScripts
	if Parent(speaking) ~= location
		speaking = 0
	PrintStatusLine
#ifset USE_ROODYLIB
	Main_Calls
#endif
}

routine IntroText
{

}

player_character you "you"
{
}

room STARTLOCATION "Start Location"
{
	long_desc
	{
		PrintExits
	}
	nw_to TrapRoom
	e_to EastRoom
	s_to EastRoom
	sw_to EastRoom
	se_to SouthRoom
	w_to WestRoom
	no_clump true
	cango_name "a mysterious place"
	is inconsistent_exits
}

room TrapRoom "Dead End"
{
	long_desc
	{
		PrintExits
	}
}

room EastRoom "East Room"
{
	long_desc
	{
		PrintExits
	}
	w_to STARTLOCATION
	s_to SouthRoom
	n_to red_door
	before
	{
		object MovePlayer
		{
			"You stroll into the East Room."
			return false
		}
	}
}

door red_door "Red Door"
{
	noun "door"
	between eastroom northroom
}

room northroom "North Room"
{
	long_desc
	{
		PrintExits
	}
	w_to portal
	s_to red_door
}

object portal "portal"
{
	article "the"
	noun "portal"
	in northroom
!	is enterable
	door_to STARTLOCATION
}

room SouthRoom "South Room"
{
	long_desc
	{
		PrintExits
	}
	cango_name SKIP
	n_to EastRoom
}

room WestRoom "West Room"
{
	long_desc
	{
		PrintExits
	}
	e_to STARTLOCATION
}

replace GetExits
{
! reset all of our destination "jars" and direction "pebbles"
	local i

	for (i = north_pebble;i <= out_pebble ;i++ )
	{
		move i to direction_pile
	}
	OtherExits ! (see below)
#ifset LIST_KNOWN_ROOMS
	remove unknownjar
#endif
	while child(exit_shelf)
	{
		move child(exit_shelf) to storage_shelf
	}

	if object is inconsistent_exits
		MixObjects(direction_pile)

	local b, c, d
	i = youngest(direction_pile)  ! pick a direction pebble
	while i
	{
		d = elder(i)   ! choose next pebble, too
		if object.(i.direct) ! see if the direction exists from the intended room
		{
			b = object.(i.direct)
			if b.type = door
			{
				if b is not locked
					b = b.between #((object = \
				b.between #1) + 1)
			}
			elseif (&b.door_to and b is not locked and
			b.type ~= door and b.type ~= room)
				b = b.door_to
			elseif (b.door_to and b is not locked and
			b.type ~= door and b.type ~= room)
				b = b.door_to

			if b.type = room and b.cango_name ~= SKIP ! make sure the direction
			{                     ! goes to a room and shouldn't be skipped
				for c in exit_shelf
				{
					if c.name = b.cango_name, b.name
					{                    ! if a jar on the "exit shelf" has the same
						move i to c       ! name as the current destination room, move
						break             ! this pebble to that jar
					}
				}
#ifset LIST_KNOWN_ROOMS
				if i in direction_pile and b is not known
				{
					move i to unknownjar
					if parent(unknownjar) ~= exit_shelf
						move unknownjar to exit_shelf
				}
				else
#endif
				if i in direction_pile        ! if not, start a new destination
				{                             ! room jar on the exit shelf
					c = child(storage_shelf)
					move c to exit_shelf
					if b.cango_name
					{
						c.name = b.cango_name
					}
					else
						c.name = b.name
					move i to c
				}
			}
		}
		i = d
	}
}

object unknownjar
{
!	in storage_shelf
}

replace PrintExits
{
	local a, b, c, d, e,f,g,h

	f = children(exit_shelf)
	g = f > 2
	a = child(exit_shelf)
	while a
	{
		h = younger(a)
		if e and location.no_clump
		{
			print AFTER_PERIOD;
		}
		elseif e++
			print " ";
		if location.no_clump or e=1
			CanGoMessage(&PrintExits, 1,1) ! "You can go ";
		b = children(a)
		d = b > 2
		c = child(a)
		while b
		{
			print c.name;
			if b > 1 and d
			{
				print ", ";
			}
			if b = 2
			{
				if not d
				{
					" ";
				}
				print "or ";
			}
			c = younger(c)
			b--
		}
#ifset LIST_KNOWN_ROOMS
		if a ~= unknownjar
#endif
			CanGoMessage(&PrintExits, 1,2,a) ! " to <room name>";
!		print a.name;
		if location.no_clump
			print ".";
		else
		{
			--f
			if f and g
			{
				print ",";
			}
			if (f = 1 and g) or (f and not g)
			{
				print " or";
			}
		}
		a = h
	}
	if e
	{
		if not location.no_clump
			print ".";
		""
	}
	else
		CanGoMessage(&PrintExits,2 ) ! "In fact, you can't go anywhere."
}
