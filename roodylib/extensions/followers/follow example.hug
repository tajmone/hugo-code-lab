!::
! Follow System Example
!::

!:: Raise limits, if necessary (here are some of the limits you're likely to
!   run into first).
!$MAXROUTINES = 320
!$MAXDICT = 1024
!$MAXDICTEXTEND = 0 ! (needed for adding more dictionary words mid-game)

!:: Flags
!#set BETA                ! Compile with the comments-in-transcripts library
                          !   addition
!#set HUGOFIX             ! Compile with HugoFix Debugging Library commands
                          !   available (type $? in game)
!#set VERBSTUBS           ! Include the grammar and routines from verbstubs.g
                          !   and verbstubs.h, respectively
!#set USE_ATTACHABLES     ! Use attachable items
!#set USE_PLURAL_OBJECTS  ! Use plural objects
!#set USE_ROLLABLES       ! Allow the pushing of mobile objects (needs Roodylib)
#set USE_ROODYLIB

#set LIST_CLOTHES_FIRST
#set NEW_DESCRIBEPLACE
!#set USE_VEHICLES        ! Use vehicle objects
#set VERSIONS            ! Print library versions at compile time

!:: switches              ! example how one can add compiler switches to source
!#switches -ls            ! print compilation stats to .LST file

#ifset HUGOFIX
#set DEBUG
#endif

!:: Constants and global variables (some constants must be set before hugolib
!   is included):

constant GAME_TITLE "Follow System Example"
constant AUTHOR "Roody Yogurt"
constant RELEASE "1.0"
!constant BLURB "An Interactive Blah"
!constant IFID "put-IFID here"
!constant AFTER_PERIOD " "     ! include one space after full stops (as opposed
                               !   to two)
!constant INDENT_SIZE 0        ! no indentation in room descriptions and room
                               !   content listings

!:: Grammar Library Inclusions (grammar must come first)
#ifset USE_ROODYLIB
#include "roodylib.g"
#endif
verb "follow"
	* object              DoFollow

verb "stop"
	*                      DoStop
! new grammar needs to be defined before the including verblib
#include "verblib.g"        ! Verb Library

#include "hugolib.h"        ! Standard  Hugo Library
#ifset USE_ROODYLIB
#include "roodylib.h"         ! Hugo  Library Updates
#endif
#include "followers.h"

!::	Other Library Inclusions

!::	Game Initialization	routine
routine init
{
!: First Things First
	SetGlobalsAndFillArrays
!: Screen clear section
#ifclear _ROODYLIB_H
	CenterTitle("Hugo Interactive Fiction")
	cls
#ifset USE_PLURAL_OBJECTS
	InitPluralObjects
#endif
#else
	SimpleIntro
	InitScreen
!: Set up any special libraries
	Init_Calls
#endif
!: Game opening
	IntroText
	MovePlayer(location)
}


routine SetGlobalsAndFillArrays
{
! if using Roodylib, verbosity can be set to BRIEF, SUPERBRIEF, OR VERBOSE
	verbosity = 2
	counter = -1                    ! 1 turn before turn 0
! if using Roodylib, can be set to NO_STATUS, SCORE_MOVES, TIME_STATUS,
! CUSTOM_STATUS, INFOCOM_STYLE, MILITARY_TIME
	STATUSTYPE = 1
	FORMAT = FORMAT | DESCFORM_D
	TEXTCOLOR = DEF_FOREGROUND
	BGCOLOR = DEF_BACKGROUND
	SL_TEXTCOLOR = DEF_SL_FOREGROUND
	SL_BGCOLOR = DEF_SL_BACKGROUND
	INPUTCOLOR = MATCH_FOREGROUND
#if defined TITLECOLOR
	TITLECOLOR = DEF_FOREGROUND
#endif
	prompt = ">"
	DEFAULT_FONT = PROP_ON
#if defined GAME_TITLE
	display.title_caption = GAME_TITLE
#endif
#ifset _ROODYLIB_H
	MakePlayer(you,2) ! sets player as you object, second person
#else
	player = you
#endif
	location = STARTLOCATION
}

routine IntroText
{
	"Welcome to the Roodylib following example. To get the giant to follow you,
	type \"GIANT, FOLLOW ME.\" You can command him to stop following with
	\"GIANT, STOP.\""
	StartFollowing  ! starts the follow system
#if defined DoVersion
	""
	DoVersion
#endif

}

!::	Main game loop
routine main
{
	counter = counter + 1
	run location.each_turn
	runevents
	runscripts
#ifset _ROODYLIB_H
	SpeakerCheck
#else
	if parent(speaking) ~= location
		speaking = 0
#endif
	PrintStatusLine
#ifset _ROODYLIB_H
	Main_Calls
#endif
}


player_character you "you"
{
}

room STARTLOCATION "Start Location"
{
	long_desc
		"There's a stairwell down, a door barely big enough for you to the north,
		and a large archway to the east."
	e_to east_room
	d_to basement
	n_to small_room
	follow_message
	{
		select old_location
			case basement : " you up the stairs."
			case else : " you."
	}
}

character friendlygiant "friendly giant"
{
	article "the"
	adjective "friendly"
	noun "giant"
	in STARTLOCATION
	list_contents
		return ListClothesFirst(self)
	order_response
	{
		! a response to GIANT, FOLLOW ME
		if verbroutine = &DoFollow and object = player  ! DoFollow can be found in verbstub
		{
			if self is following
				"The giant says, \"I'm already following you!\""
			else
			{
				"The giant says, \"OK!\""
				AddFollower(self)
			}
			return true
		}
		elseif verbroutine = &DoStop ! DoStop is made up for this example
		{
			if self is not following
				"The giant says, \"I wasn't following you!\""
			else
			{
				"The giant says, \"OK!\""
				RemoveFollower(self)
			}
			return true
		}
		return false ! for other commands, do the normal behavior
	}
}

object hat "hat"
{
	article "a"
	noun "hat"
	in friendlygiant
	is clothing worn
}

object bar "candybar"
{
	in friendlygiant
	noun "candybar"
	article "a"
}

object table "table"
{
	noun "table"
	article "the"
	is platform enterable
	in east_room
}

room east_room "East Room"
{
	long_desc
		"An exit to the west leads back to the first room."
	w_to startlocation
}

room basement "Basement"
{
	long_desc
		"A stairwell leads back up to the other room."
	follow_message
		" you down the stairs."
	u_to startlocation
}

room small_room "Small Room"
{
	long_desc
		"An exit leads back to the south."
	disallow_follow
		return true !  the giant is too big for this room
	s_to startlocation
}

routine DoStop
{
	"Stop what?"
	return false
}

routine DoFollow
{
	if object = player
		"You can't follow yourself."
	elseif object is not living
	{
		"You can't follow that."
	}
	elseif object is following
	{
		"The giant is already following you."
	}
	else
		"He's not going anywhere."
}
